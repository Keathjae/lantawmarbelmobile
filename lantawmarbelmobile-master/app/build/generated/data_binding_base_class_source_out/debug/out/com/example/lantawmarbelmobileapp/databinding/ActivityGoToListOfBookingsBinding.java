// Generated by view binder compiler. Do not edit!
package com.example.lantawmarbelmobileapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.lantawmarbelmobileapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGoToListOfBookingsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final CardView amenityCard;

  @NonNull
  public final ImageView amenityDropdownIcon;

  @NonNull
  public final LinearLayout amenityExpandableContent;

  @NonNull
  public final CardView breakfastCard;

  @NonNull
  public final ImageView breakfastDropdownIcon;

  @NonNull
  public final LinearLayout breakfastExpandableContent;

  @NonNull
  public final Button btnBook;

  @NonNull
  public final Button btnCheckInDate;

  @NonNull
  public final Button btnCheckOutDate;

  @NonNull
  public final CheckBox checkboxBBQ;

  @NonNull
  public final CheckBox checkboxBoat;

  @NonNull
  public final CheckBox checkboxDeluxeRoom;

  @NonNull
  public final CheckBox checkboxDessert;

  @NonNull
  public final CheckBox checkboxExtraDrink;

  @NonNull
  public final CheckBox checkboxExtraRice;

  @NonNull
  public final CheckBox checkboxFamilyRoom;

  @NonNull
  public final CheckBox checkboxKaraoke;

  @NonNull
  public final CheckBox checkboxLargeCottage;

  @NonNull
  public final CheckBox checkboxMediumCottage;

  @NonNull
  public final CheckBox checkboxPWDDiscount;

  @NonNull
  public final CheckBox checkboxPool;

  @NonNull
  public final CheckBox checkboxPremiumCottage;

  @NonNull
  public final CheckBox checkboxSeniorDiscount;

  @NonNull
  public final CheckBox checkboxSmallCottage;

  @NonNull
  public final CheckBox checkboxStandardRoom;

  @NonNull
  public final CheckBox checkboxSuiteRoom;

  @NonNull
  public final CardView cottageCard;

  @NonNull
  public final ImageView cottageDropdownIcon;

  @NonNull
  public final LinearLayout cottageExpandableContent;

  @NonNull
  public final CardView dateCard;

  @NonNull
  public final ImageView dateDropdownIcon;

  @NonNull
  public final LinearLayout dateExpandableContent;

  @NonNull
  public final EditText deluxeAdultsCount;

  @NonNull
  public final LinearLayout deluxeGuestLayout;

  @NonNull
  public final EditText deluxeKidsCount;

  @NonNull
  public final TextView deluxeRoomDetails;

  @NonNull
  public final TextView discountAmount;

  @NonNull
  public final CardView discountCard;

  @NonNull
  public final ImageView discountDropdownIcon;

  @NonNull
  public final LinearLayout discountExpandableContent;

  @NonNull
  public final LinearLayout discountLayout;

  @NonNull
  public final EditText editTextPaymentAmount;

  @NonNull
  public final EditText familyAdultsCount;

  @NonNull
  public final LinearLayout familyGuestLayout;

  @NonNull
  public final EditText familyKidsCount;

  @NonNull
  public final TextView familyRoomDetails;

  @NonNull
  public final CoordinatorLayout main;

  @NonNull
  public final CardView paymentCard;

  @NonNull
  public final ImageView paymentDropdownIcon;

  @NonNull
  public final LinearLayout paymentExpandableContent;

  @NonNull
  public final RadioButton radioCash;

  @NonNull
  public final RadioButton radioGCash;

  @NonNull
  public final RadioGroup radioGroupPayment;

  @NonNull
  public final CardView roomsCard;

  @NonNull
  public final ImageView roomsDropdownIcon;

  @NonNull
  public final LinearLayout roomsExpandableContent;

  @NonNull
  public final EditText singleAdultsCount;

  @NonNull
  public final LinearLayout singleGuestLayout;

  @NonNull
  public final EditText singleKidsCount;

  @NonNull
  public final TextView singleRoomDetails;

  @NonNull
  public final Spinner spinnerBreakfast;

  @NonNull
  public final EditText standardAdultsCount;

  @NonNull
  public final LinearLayout standardGuestLayout;

  @NonNull
  public final EditText standardKidsCount;

  @NonNull
  public final TextView standardRoomDetails;

  @NonNull
  public final TextView subtotalAmount;

  @NonNull
  public final CardView summaryCard;

  @NonNull
  public final TextView summaryText;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView totalAmount;

  private ActivityGoToListOfBookingsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull CardView amenityCard, @NonNull ImageView amenityDropdownIcon,
      @NonNull LinearLayout amenityExpandableContent, @NonNull CardView breakfastCard,
      @NonNull ImageView breakfastDropdownIcon, @NonNull LinearLayout breakfastExpandableContent,
      @NonNull Button btnBook, @NonNull Button btnCheckInDate, @NonNull Button btnCheckOutDate,
      @NonNull CheckBox checkboxBBQ, @NonNull CheckBox checkboxBoat,
      @NonNull CheckBox checkboxDeluxeRoom, @NonNull CheckBox checkboxDessert,
      @NonNull CheckBox checkboxExtraDrink, @NonNull CheckBox checkboxExtraRice,
      @NonNull CheckBox checkboxFamilyRoom, @NonNull CheckBox checkboxKaraoke,
      @NonNull CheckBox checkboxLargeCottage, @NonNull CheckBox checkboxMediumCottage,
      @NonNull CheckBox checkboxPWDDiscount, @NonNull CheckBox checkboxPool,
      @NonNull CheckBox checkboxPremiumCottage, @NonNull CheckBox checkboxSeniorDiscount,
      @NonNull CheckBox checkboxSmallCottage, @NonNull CheckBox checkboxStandardRoom,
      @NonNull CheckBox checkboxSuiteRoom, @NonNull CardView cottageCard,
      @NonNull ImageView cottageDropdownIcon, @NonNull LinearLayout cottageExpandableContent,
      @NonNull CardView dateCard, @NonNull ImageView dateDropdownIcon,
      @NonNull LinearLayout dateExpandableContent, @NonNull EditText deluxeAdultsCount,
      @NonNull LinearLayout deluxeGuestLayout, @NonNull EditText deluxeKidsCount,
      @NonNull TextView deluxeRoomDetails, @NonNull TextView discountAmount,
      @NonNull CardView discountCard, @NonNull ImageView discountDropdownIcon,
      @NonNull LinearLayout discountExpandableContent, @NonNull LinearLayout discountLayout,
      @NonNull EditText editTextPaymentAmount, @NonNull EditText familyAdultsCount,
      @NonNull LinearLayout familyGuestLayout, @NonNull EditText familyKidsCount,
      @NonNull TextView familyRoomDetails, @NonNull CoordinatorLayout main,
      @NonNull CardView paymentCard, @NonNull ImageView paymentDropdownIcon,
      @NonNull LinearLayout paymentExpandableContent, @NonNull RadioButton radioCash,
      @NonNull RadioButton radioGCash, @NonNull RadioGroup radioGroupPayment,
      @NonNull CardView roomsCard, @NonNull ImageView roomsDropdownIcon,
      @NonNull LinearLayout roomsExpandableContent, @NonNull EditText singleAdultsCount,
      @NonNull LinearLayout singleGuestLayout, @NonNull EditText singleKidsCount,
      @NonNull TextView singleRoomDetails, @NonNull Spinner spinnerBreakfast,
      @NonNull EditText standardAdultsCount, @NonNull LinearLayout standardGuestLayout,
      @NonNull EditText standardKidsCount, @NonNull TextView standardRoomDetails,
      @NonNull TextView subtotalAmount, @NonNull CardView summaryCard,
      @NonNull TextView summaryText, @NonNull Toolbar toolbar, @NonNull TextView totalAmount) {
    this.rootView = rootView;
    this.amenityCard = amenityCard;
    this.amenityDropdownIcon = amenityDropdownIcon;
    this.amenityExpandableContent = amenityExpandableContent;
    this.breakfastCard = breakfastCard;
    this.breakfastDropdownIcon = breakfastDropdownIcon;
    this.breakfastExpandableContent = breakfastExpandableContent;
    this.btnBook = btnBook;
    this.btnCheckInDate = btnCheckInDate;
    this.btnCheckOutDate = btnCheckOutDate;
    this.checkboxBBQ = checkboxBBQ;
    this.checkboxBoat = checkboxBoat;
    this.checkboxDeluxeRoom = checkboxDeluxeRoom;
    this.checkboxDessert = checkboxDessert;
    this.checkboxExtraDrink = checkboxExtraDrink;
    this.checkboxExtraRice = checkboxExtraRice;
    this.checkboxFamilyRoom = checkboxFamilyRoom;
    this.checkboxKaraoke = checkboxKaraoke;
    this.checkboxLargeCottage = checkboxLargeCottage;
    this.checkboxMediumCottage = checkboxMediumCottage;
    this.checkboxPWDDiscount = checkboxPWDDiscount;
    this.checkboxPool = checkboxPool;
    this.checkboxPremiumCottage = checkboxPremiumCottage;
    this.checkboxSeniorDiscount = checkboxSeniorDiscount;
    this.checkboxSmallCottage = checkboxSmallCottage;
    this.checkboxStandardRoom = checkboxStandardRoom;
    this.checkboxSuiteRoom = checkboxSuiteRoom;
    this.cottageCard = cottageCard;
    this.cottageDropdownIcon = cottageDropdownIcon;
    this.cottageExpandableContent = cottageExpandableContent;
    this.dateCard = dateCard;
    this.dateDropdownIcon = dateDropdownIcon;
    this.dateExpandableContent = dateExpandableContent;
    this.deluxeAdultsCount = deluxeAdultsCount;
    this.deluxeGuestLayout = deluxeGuestLayout;
    this.deluxeKidsCount = deluxeKidsCount;
    this.deluxeRoomDetails = deluxeRoomDetails;
    this.discountAmount = discountAmount;
    this.discountCard = discountCard;
    this.discountDropdownIcon = discountDropdownIcon;
    this.discountExpandableContent = discountExpandableContent;
    this.discountLayout = discountLayout;
    this.editTextPaymentAmount = editTextPaymentAmount;
    this.familyAdultsCount = familyAdultsCount;
    this.familyGuestLayout = familyGuestLayout;
    this.familyKidsCount = familyKidsCount;
    this.familyRoomDetails = familyRoomDetails;
    this.main = main;
    this.paymentCard = paymentCard;
    this.paymentDropdownIcon = paymentDropdownIcon;
    this.paymentExpandableContent = paymentExpandableContent;
    this.radioCash = radioCash;
    this.radioGCash = radioGCash;
    this.radioGroupPayment = radioGroupPayment;
    this.roomsCard = roomsCard;
    this.roomsDropdownIcon = roomsDropdownIcon;
    this.roomsExpandableContent = roomsExpandableContent;
    this.singleAdultsCount = singleAdultsCount;
    this.singleGuestLayout = singleGuestLayout;
    this.singleKidsCount = singleKidsCount;
    this.singleRoomDetails = singleRoomDetails;
    this.spinnerBreakfast = spinnerBreakfast;
    this.standardAdultsCount = standardAdultsCount;
    this.standardGuestLayout = standardGuestLayout;
    this.standardKidsCount = standardKidsCount;
    this.standardRoomDetails = standardRoomDetails;
    this.subtotalAmount = subtotalAmount;
    this.summaryCard = summaryCard;
    this.summaryText = summaryText;
    this.toolbar = toolbar;
    this.totalAmount = totalAmount;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGoToListOfBookingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGoToListOfBookingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_go_to_list_of_bookings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGoToListOfBookingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.amenityCard;
      CardView amenityCard = ViewBindings.findChildViewById(rootView, id);
      if (amenityCard == null) {
        break missingId;
      }

      id = R.id.amenityDropdownIcon;
      ImageView amenityDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (amenityDropdownIcon == null) {
        break missingId;
      }

      id = R.id.amenityExpandableContent;
      LinearLayout amenityExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (amenityExpandableContent == null) {
        break missingId;
      }

      id = R.id.breakfastCard;
      CardView breakfastCard = ViewBindings.findChildViewById(rootView, id);
      if (breakfastCard == null) {
        break missingId;
      }

      id = R.id.breakfastDropdownIcon;
      ImageView breakfastDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (breakfastDropdownIcon == null) {
        break missingId;
      }

      id = R.id.breakfastExpandableContent;
      LinearLayout breakfastExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (breakfastExpandableContent == null) {
        break missingId;
      }

      id = R.id.btnBook;
      Button btnBook = ViewBindings.findChildViewById(rootView, id);
      if (btnBook == null) {
        break missingId;
      }

      id = R.id.btnCheckInDate;
      Button btnCheckInDate = ViewBindings.findChildViewById(rootView, id);
      if (btnCheckInDate == null) {
        break missingId;
      }

      id = R.id.btnCheckOutDate;
      Button btnCheckOutDate = ViewBindings.findChildViewById(rootView, id);
      if (btnCheckOutDate == null) {
        break missingId;
      }

      id = R.id.checkboxBBQ;
      CheckBox checkboxBBQ = ViewBindings.findChildViewById(rootView, id);
      if (checkboxBBQ == null) {
        break missingId;
      }

      id = R.id.checkboxBoat;
      CheckBox checkboxBoat = ViewBindings.findChildViewById(rootView, id);
      if (checkboxBoat == null) {
        break missingId;
      }

      id = R.id.checkboxDeluxeRoom;
      CheckBox checkboxDeluxeRoom = ViewBindings.findChildViewById(rootView, id);
      if (checkboxDeluxeRoom == null) {
        break missingId;
      }

      id = R.id.checkboxDessert;
      CheckBox checkboxDessert = ViewBindings.findChildViewById(rootView, id);
      if (checkboxDessert == null) {
        break missingId;
      }

      id = R.id.checkboxExtraDrink;
      CheckBox checkboxExtraDrink = ViewBindings.findChildViewById(rootView, id);
      if (checkboxExtraDrink == null) {
        break missingId;
      }

      id = R.id.checkboxExtraRice;
      CheckBox checkboxExtraRice = ViewBindings.findChildViewById(rootView, id);
      if (checkboxExtraRice == null) {
        break missingId;
      }

      id = R.id.checkboxFamilyRoom;
      CheckBox checkboxFamilyRoom = ViewBindings.findChildViewById(rootView, id);
      if (checkboxFamilyRoom == null) {
        break missingId;
      }

      id = R.id.checkboxKaraoke;
      CheckBox checkboxKaraoke = ViewBindings.findChildViewById(rootView, id);
      if (checkboxKaraoke == null) {
        break missingId;
      }

      id = R.id.checkboxLargeCottage;
      CheckBox checkboxLargeCottage = ViewBindings.findChildViewById(rootView, id);
      if (checkboxLargeCottage == null) {
        break missingId;
      }

      id = R.id.checkboxMediumCottage;
      CheckBox checkboxMediumCottage = ViewBindings.findChildViewById(rootView, id);
      if (checkboxMediumCottage == null) {
        break missingId;
      }

      id = R.id.checkboxPWDDiscount;
      CheckBox checkboxPWDDiscount = ViewBindings.findChildViewById(rootView, id);
      if (checkboxPWDDiscount == null) {
        break missingId;
      }

      id = R.id.checkboxPool;
      CheckBox checkboxPool = ViewBindings.findChildViewById(rootView, id);
      if (checkboxPool == null) {
        break missingId;
      }

      id = R.id.checkboxPremiumCottage;
      CheckBox checkboxPremiumCottage = ViewBindings.findChildViewById(rootView, id);
      if (checkboxPremiumCottage == null) {
        break missingId;
      }

      id = R.id.checkboxSeniorDiscount;
      CheckBox checkboxSeniorDiscount = ViewBindings.findChildViewById(rootView, id);
      if (checkboxSeniorDiscount == null) {
        break missingId;
      }

      id = R.id.checkboxSmallCottage;
      CheckBox checkboxSmallCottage = ViewBindings.findChildViewById(rootView, id);
      if (checkboxSmallCottage == null) {
        break missingId;
      }

      id = R.id.checkboxStandardRoom;
      CheckBox checkboxStandardRoom = ViewBindings.findChildViewById(rootView, id);
      if (checkboxStandardRoom == null) {
        break missingId;
      }

      id = R.id.checkboxSuiteRoom;
      CheckBox checkboxSuiteRoom = ViewBindings.findChildViewById(rootView, id);
      if (checkboxSuiteRoom == null) {
        break missingId;
      }

      id = R.id.cottageCard;
      CardView cottageCard = ViewBindings.findChildViewById(rootView, id);
      if (cottageCard == null) {
        break missingId;
      }

      id = R.id.cottageDropdownIcon;
      ImageView cottageDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (cottageDropdownIcon == null) {
        break missingId;
      }

      id = R.id.cottageExpandableContent;
      LinearLayout cottageExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (cottageExpandableContent == null) {
        break missingId;
      }

      id = R.id.dateCard;
      CardView dateCard = ViewBindings.findChildViewById(rootView, id);
      if (dateCard == null) {
        break missingId;
      }

      id = R.id.dateDropdownIcon;
      ImageView dateDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (dateDropdownIcon == null) {
        break missingId;
      }

      id = R.id.dateExpandableContent;
      LinearLayout dateExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (dateExpandableContent == null) {
        break missingId;
      }

      id = R.id.deluxeAdultsCount;
      EditText deluxeAdultsCount = ViewBindings.findChildViewById(rootView, id);
      if (deluxeAdultsCount == null) {
        break missingId;
      }

      id = R.id.deluxeGuestLayout;
      LinearLayout deluxeGuestLayout = ViewBindings.findChildViewById(rootView, id);
      if (deluxeGuestLayout == null) {
        break missingId;
      }

      id = R.id.deluxeKidsCount;
      EditText deluxeKidsCount = ViewBindings.findChildViewById(rootView, id);
      if (deluxeKidsCount == null) {
        break missingId;
      }

      id = R.id.deluxeRoomDetails;
      TextView deluxeRoomDetails = ViewBindings.findChildViewById(rootView, id);
      if (deluxeRoomDetails == null) {
        break missingId;
      }

      id = R.id.discountAmount;
      TextView discountAmount = ViewBindings.findChildViewById(rootView, id);
      if (discountAmount == null) {
        break missingId;
      }

      id = R.id.discountCard;
      CardView discountCard = ViewBindings.findChildViewById(rootView, id);
      if (discountCard == null) {
        break missingId;
      }

      id = R.id.discountDropdownIcon;
      ImageView discountDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (discountDropdownIcon == null) {
        break missingId;
      }

      id = R.id.discountExpandableContent;
      LinearLayout discountExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (discountExpandableContent == null) {
        break missingId;
      }

      id = R.id.discountLayout;
      LinearLayout discountLayout = ViewBindings.findChildViewById(rootView, id);
      if (discountLayout == null) {
        break missingId;
      }

      id = R.id.editTextPaymentAmount;
      EditText editTextPaymentAmount = ViewBindings.findChildViewById(rootView, id);
      if (editTextPaymentAmount == null) {
        break missingId;
      }

      id = R.id.familyAdultsCount;
      EditText familyAdultsCount = ViewBindings.findChildViewById(rootView, id);
      if (familyAdultsCount == null) {
        break missingId;
      }

      id = R.id.familyGuestLayout;
      LinearLayout familyGuestLayout = ViewBindings.findChildViewById(rootView, id);
      if (familyGuestLayout == null) {
        break missingId;
      }

      id = R.id.familyKidsCount;
      EditText familyKidsCount = ViewBindings.findChildViewById(rootView, id);
      if (familyKidsCount == null) {
        break missingId;
      }

      id = R.id.familyRoomDetails;
      TextView familyRoomDetails = ViewBindings.findChildViewById(rootView, id);
      if (familyRoomDetails == null) {
        break missingId;
      }

      CoordinatorLayout main = (CoordinatorLayout) rootView;

      id = R.id.paymentCard;
      CardView paymentCard = ViewBindings.findChildViewById(rootView, id);
      if (paymentCard == null) {
        break missingId;
      }

      id = R.id.paymentDropdownIcon;
      ImageView paymentDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (paymentDropdownIcon == null) {
        break missingId;
      }

      id = R.id.paymentExpandableContent;
      LinearLayout paymentExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (paymentExpandableContent == null) {
        break missingId;
      }

      id = R.id.radioCash;
      RadioButton radioCash = ViewBindings.findChildViewById(rootView, id);
      if (radioCash == null) {
        break missingId;
      }

      id = R.id.radioGCash;
      RadioButton radioGCash = ViewBindings.findChildViewById(rootView, id);
      if (radioGCash == null) {
        break missingId;
      }

      id = R.id.radioGroupPayment;
      RadioGroup radioGroupPayment = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupPayment == null) {
        break missingId;
      }

      id = R.id.roomsCard;
      CardView roomsCard = ViewBindings.findChildViewById(rootView, id);
      if (roomsCard == null) {
        break missingId;
      }

      id = R.id.roomsDropdownIcon;
      ImageView roomsDropdownIcon = ViewBindings.findChildViewById(rootView, id);
      if (roomsDropdownIcon == null) {
        break missingId;
      }

      id = R.id.roomsExpandableContent;
      LinearLayout roomsExpandableContent = ViewBindings.findChildViewById(rootView, id);
      if (roomsExpandableContent == null) {
        break missingId;
      }

      id = R.id.singleAdultsCount;
      EditText singleAdultsCount = ViewBindings.findChildViewById(rootView, id);
      if (singleAdultsCount == null) {
        break missingId;
      }

      id = R.id.singleGuestLayout;
      LinearLayout singleGuestLayout = ViewBindings.findChildViewById(rootView, id);
      if (singleGuestLayout == null) {
        break missingId;
      }

      id = R.id.singleKidsCount;
      EditText singleKidsCount = ViewBindings.findChildViewById(rootView, id);
      if (singleKidsCount == null) {
        break missingId;
      }

      id = R.id.singleRoomDetails;
      TextView singleRoomDetails = ViewBindings.findChildViewById(rootView, id);
      if (singleRoomDetails == null) {
        break missingId;
      }

      id = R.id.spinnerBreakfast;
      Spinner spinnerBreakfast = ViewBindings.findChildViewById(rootView, id);
      if (spinnerBreakfast == null) {
        break missingId;
      }

      id = R.id.standardAdultsCount;
      EditText standardAdultsCount = ViewBindings.findChildViewById(rootView, id);
      if (standardAdultsCount == null) {
        break missingId;
      }

      id = R.id.standardGuestLayout;
      LinearLayout standardGuestLayout = ViewBindings.findChildViewById(rootView, id);
      if (standardGuestLayout == null) {
        break missingId;
      }

      id = R.id.standardKidsCount;
      EditText standardKidsCount = ViewBindings.findChildViewById(rootView, id);
      if (standardKidsCount == null) {
        break missingId;
      }

      id = R.id.standardRoomDetails;
      TextView standardRoomDetails = ViewBindings.findChildViewById(rootView, id);
      if (standardRoomDetails == null) {
        break missingId;
      }

      id = R.id.subtotalAmount;
      TextView subtotalAmount = ViewBindings.findChildViewById(rootView, id);
      if (subtotalAmount == null) {
        break missingId;
      }

      id = R.id.summaryCard;
      CardView summaryCard = ViewBindings.findChildViewById(rootView, id);
      if (summaryCard == null) {
        break missingId;
      }

      id = R.id.summaryText;
      TextView summaryText = ViewBindings.findChildViewById(rootView, id);
      if (summaryText == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.totalAmount;
      TextView totalAmount = ViewBindings.findChildViewById(rootView, id);
      if (totalAmount == null) {
        break missingId;
      }

      return new ActivityGoToListOfBookingsBinding((CoordinatorLayout) rootView, amenityCard,
          amenityDropdownIcon, amenityExpandableContent, breakfastCard, breakfastDropdownIcon,
          breakfastExpandableContent, btnBook, btnCheckInDate, btnCheckOutDate, checkboxBBQ,
          checkboxBoat, checkboxDeluxeRoom, checkboxDessert, checkboxExtraDrink, checkboxExtraRice,
          checkboxFamilyRoom, checkboxKaraoke, checkboxLargeCottage, checkboxMediumCottage,
          checkboxPWDDiscount, checkboxPool, checkboxPremiumCottage, checkboxSeniorDiscount,
          checkboxSmallCottage, checkboxStandardRoom, checkboxSuiteRoom, cottageCard,
          cottageDropdownIcon, cottageExpandableContent, dateCard, dateDropdownIcon,
          dateExpandableContent, deluxeAdultsCount, deluxeGuestLayout, deluxeKidsCount,
          deluxeRoomDetails, discountAmount, discountCard, discountDropdownIcon,
          discountExpandableContent, discountLayout, editTextPaymentAmount, familyAdultsCount,
          familyGuestLayout, familyKidsCount, familyRoomDetails, main, paymentCard,
          paymentDropdownIcon, paymentExpandableContent, radioCash, radioGCash, radioGroupPayment,
          roomsCard, roomsDropdownIcon, roomsExpandableContent, singleAdultsCount,
          singleGuestLayout, singleKidsCount, singleRoomDetails, spinnerBreakfast,
          standardAdultsCount, standardGuestLayout, standardKidsCount, standardRoomDetails,
          subtotalAmount, summaryCard, summaryText, toolbar, totalAmount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
